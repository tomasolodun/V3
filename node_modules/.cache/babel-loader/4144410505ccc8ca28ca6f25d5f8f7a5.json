{"ast":null,"code":"'use strict';\n/**\n* NOTE: the following copyright and license, as well as the long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.\n*\n* The implementation follows the original, but has been modified for JavaScript.\n*/\n\n/**\n* ====================================================\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ====================================================\n*/\n\n/**\n* double erfc(double x)\n*                                 x\n*                        2       |\\\n*        erf(x)  = -----------   | exp(-t*t)dt\n*                     sqrt(pi)  \\|\n*                                0\n*\n*        erfc(x) = 1-erf(x)\n*\n*   Note that\n*\n*        erf(-x)  = -erf(x)\n*        erfc(-x) = 2 - erfc(x)\n*\n* Method:\n*   1. For |x| in [0, 0.84375),\n*\n*        erf(x)  = x + x*R(x^2)\n*        erfc(x) = 1 - erf(x)           if x in [-.84375,0.25]\n*                = 0.5 + ((0.5-x)-x*R)  if x in [0.25,0.84375]\n*\n*      where R = P/Q where P is an odd polynomial of degree 8 and Q is an odd polynomial of degree 10.\n*\n*        | R - (erf(x)-x)/x | <= 2**-57.90\n*\n*      Remark: the formula is derived by noting\n*\n*        erf(x) = (2/sqrt(pi))*(x - x^3/3 + x^5/10 - x^7/42 + ....)\n*\n*      and that\n*\n*        2/sqrt(pi) = 1.128379167095512573896158903121545171688\n*\n*      is close to one. The interval is chosen because the fix point of erf(x) is near 0.6174 (i.e., erf(x)=x when x is near 0.6174), and, by some experiment, 0.84375 is chosen to guarantee the error is less than one ulp for erf.\n*\n*   2. For |x| in [0.84375,1.25), let s = |x| - 1, and c = 0.84506291151 rounded to single (24 bits)\n*\n*        erf(x)  = sign(x) * (c + P1(s)/Q1(s))\n*        erfc(x) = (1-c) - P1(s)/Q1(s) if x > 0\n*                  1+(c+P1(s)/Q1(s))   if x < 0\n*        |P1/Q1 - (erf(|x|)-c)| <= 2**-59.06\n*\n*      Remark: here we use the Taylor series expansion at x=1.\n*\n*        erf(1+s) = erf(1) + s*Poly(s)\n*                 = 0.845.. + P1(s)/Q1(s)\n*\n*      That is, we use a rational approximation to approximate\n*\n*        erf(1+s) - (c = (single)0.84506291151)\n*\n*      Note that |P1/Q1|< 0.078 for x in [0.84375,1.25] where\n*\n*        P1(s) = degree 6 poly in s\n*        Q1(s) = degree 6 poly in s\n*\n*   3. For x in [1.25,1/0.35(~2.857143)),\n*\n*        erfc(x) = (1/x)*exp(-x*x-0.5625+R1/S1)\n*        erf(x)  = 1 - erfc(x)\n*\n*      where\n*\n*        R1(z) = degree 7 poly in z, (z=1/x^2)\n*        S1(z) = degree 8 poly in z\n*\n*   4. For x in [1/0.35,28],\n*\n*        erfc(x) = (1/x)*exp(-x*x-0.5625+R2/S2)       if x > 0\n*                = 2.0 - (1/x)*exp(-x*x-0.5625+R2/S2) if -6 < x < 0\n*                = 2.0 - tiny                         if x <= -6\n*        erf(x)  = sign(x)*(1.0 - erfc(x))            if x < 6, else\n*        erf(x)  = sign(x)*(1.0 - tiny)\n*\n*      where\n*\n*        R2(z) = degree 6 poly in z, (z=1/x^2)\n*        S2(z) = degree 7 poly in z\n*\n*   Note1:\n*       To compute exp(-x*x-0.5625+R/S), let s be a single precision number and s := x; then\n*\n*        -x*x = -s*s + (s-x)*(s+x)\n*        exp(-x*x-0.5626+R/S) = exp(-s*s-0.5625)*exp((s-x)*(s+x)+R/S);\n*\n*   Note2:\n*       Here 4 and 5 make use of the asymptotic series\n*\n*                     exp(-x*x)\n*         erfc(x) ~  ----------- * ( 1 + Poly(1/x^2) )\n*                     x*sqrt(pi)\n*\n*       We use a rational approximation to approximate\n*\n*           g(s) = f(1/x^2) = log(erfc(x)*x) - x*x + 0.5625\n*\n*       Here is the error bound for R1/S1 and R2/S2\n*\n*           |R1/S1 - f(x)| < 2**(-62.57)\n*           |R2/S2 - f(x)| < 2**(-61.52)\n*\n*   5. For inf > x >= 28,\n*\n*        erf(x)  = sign(x) * (1 - tiny)   (raise inexact)\n*        erfc(x) = tiny*tiny              (raise underflow) if x > 0\n*                = 2 - tiny               if x<0\n*\n*   6. Special cases:\n*\n*        erf(0) = 0\n*        erf(inf) = 1\n*        erf(-inf) = -1\n*        erfc(0) = 1\n*        erfc(inf) = 0\n*        erfc(-inf) = 2,\n*        erf(NaN) is NaN\n*        erfc(NaN) is NaN\n*/\n// MODULES //\n\nvar evalpoly = require('math-evalpoly').factory;\n\nvar exp = require('math-exp');\n\nvar setLowWord = require('math-float64-set-low-word'); // CONSTANTS //\n\n\nvar PINF = require('const-pinf-float64');\n\nvar NINF = require('const-ninf-float64');\n\nvar TINY = 1e-300; // 2**-56 = 1/(2**56) = 1/72057594037927940\n\nvar SMALL = 1.3877787807814457e-17;\nvar ERX = 8.45062911510467529297e-1; // 0x3FEB0AC1, 0x60000000\n// Coefficients for approximation to erf on [0, 0.84375)\n\nvar PPC = 1.28379167095512558561e-1; // 0x3FC06EBA, 0x8214DB68\n\nvar PP = [-3.25042107247001499370e-1, // 0xBFD4CD7D, 0x691CB913\n-2.84817495755985104766e-2, // 0xBF9D2A51, 0xDBD7194F\n-5.77027029648944159157e-3, // 0xBF77A291, 0x236668E4\n-2.37630166566501626084e-5 // 0xBEF8EAD6, 0x120016AC\n];\nvar QQC = 1.0;\nvar QQ = [3.97917223959155352819e-1, // 0x3FD97779, 0xCDDADC09\n6.50222499887672944485e-2, // 0x3FB0A54C, 0x5536CEBA\n5.08130628187576562776e-3, // 0x3F74D022, 0xC4D36B0F\n1.32494738004321644526e-4, // 0x3F215DC9, 0x221C1A10\n-3.96022827877536812320e-6 // 0xBED09C43, 0x42A26120\n]; // Coefficients for approximation to erf on [0.84375, 1.25)\n\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\n\nvar PA = [4.14856118683748331666e-1, // 0x3FDA8D00, 0xAD92B34D\n-3.72207876035701323847e-1, // 0xBFD7D240, 0xFBB8C3F1\n3.18346619901161753674e-1, // 0x3FD45FCA, 0x805120E4\n-1.10894694282396677476e-1, // 0xBFBC6398, 0x3D3E28EC\n3.54783043256182359371e-2, // 0x3FA22A36, 0x599795EB\n-2.16637559486879084300e-3 // 0xBF61BF38, 0x0A96073F\n];\nvar QAC = 1.0;\nvar QA = [1.06420880400844228286e-1, // 0x3FBB3E66, 0x18EEE323\n5.40397917702171048937e-1, // 0x3FE14AF0, 0x92EB6F33\n7.18286544141962662868e-2, // 0x3FB2635C, 0xD99FE9A7\n1.26171219808761642112e-1, // 0x3FC02660, 0xE763351F\n1.36370839120290507362e-2, // 0x3F8BEDC2, 0x6B51DD1C\n1.19844998467991074170e-2 // 0x3F888B54, 0x5735151D\n]; // Coefficients for approximation to erfc on [1.25, 1/0.35)\n\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\n\nvar RA = [-6.93858572707181764372e-1, // 0xBFE63416, 0xE4BA7360\n-1.05586262253232909814e1, // 0xC0251E04, 0x41B0E726 \n-6.23753324503260060396e1, // 0xC04F300A, 0xE4CBA38D\n-1.62396669462573470355e2, // 0xC0644CB1, 0x84282266\n-1.84605092906711035994e2, // 0xC067135C, 0xEBCCABB2\n-8.12874355063065934246e1, // 0xC0545265, 0x57E4D2F2\n-9.81432934416914548592 // 0xC023A0EF, 0xC69AC25C\n];\nvar SAC = 1.0;\nvar SA = [1.96512716674392571292e1, // 0x4033A6B9, 0xBD707687\n1.37657754143519042600e2, // 0x4061350C, 0x526AE721\n4.34565877475229228821e2, // 0x407B290D, 0xD58A1A71\n6.45387271733267880336e2, // 0x40842B19, 0x21EC2868\n4.29008140027567833386e2, // 0x407AD021, 0x57700314\n1.08635005541779435134e2, // 0x405B28A3, 0xEE48AE2C\n6.57024977031928170135, // 0x401A47EF, 0x8E484A93\n-6.04244152148580987438e-2 // 0xBFAEEFF2, 0xEE749A62\n]; // Coefficients for approximation to erfc on [1/0.35, 28]\n\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\n\nvar RB = [-7.99283237680523006574e-1, // 0xBFE993BA, 0x70C285DE\n-1.77579549177547519889e1, // 0xC031C209, 0x555F995A\n-1.60636384855821916062e2, // 0xC064145D, 0x43C5ED98\n-6.37566443368389627722e2, // 0xC083EC88, 0x1375F228\n-1.02509513161107724954e3, // 0xC0900461, 0x6A2E5992\n-4.83519191608651397019e2 // 0xC07E384E, 0x9BDC383F\n];\nvar SBC = 1.0;\nvar SB = [3.03380607434824582924e1, // 0x403E568B, 0x261D5190\n3.25792512996573918826e2, // 0x40745CAE, 0x221B9F0A\n1.53672958608443695994e3, // 0x409802EB, 0x189D5118\n3.19985821950859553908e3, // 0x40A8FFB7, 0x688C246A\n2.55305040643316442583e3, // 0x40A3F219, 0xCEDF3BE6\n4.74528541206955367215e2, // 0x407DA874, 0xE79FE763\n-2.24409524465858183362e1 // 0xC03670E2, 0x42712D62\n]; // FUNCTIONS //\n// Compile functions to evaluate polynomials based on the above coefficients...\n\nvar polyvalPP = evalpoly(PP);\nvar polyvalQQ = evalpoly(QQ);\nvar polyvalPA = evalpoly(PA);\nvar polyvalQA = evalpoly(QA);\nvar polyvalRA = evalpoly(RA);\nvar polyvalSA = evalpoly(SA);\nvar polyvalRB = evalpoly(RB);\nvar polyvalSB = evalpoly(SB); // ERFC //\n\n/**\n* FUNCTION: erfc( x )\n*\tEvaluates the complementary error function.\n*\n* @param {Number} x - input value\n* @returns {Number} evaluated complementary error function\n*/\n\nfunction erfc(x) {\n  var sign;\n  var ax;\n  var z;\n  var r;\n  var s;\n  var y;\n  var p;\n  var q; // Special case: NaN\n\n  if (x !== x) {\n    return NaN;\n  } // Special case: +infinity\n\n\n  if (x === PINF) {\n    return 0.0;\n  } // Special case: -infinity\n\n\n  if (x === NINF) {\n    return 2.0;\n  } // Special case: +-0\n\n\n  if (x === 0) {\n    return 1.0;\n  }\n\n  if (x < 0) {\n    sign = true;\n    ax = -x;\n  } else {\n    sign = false;\n    ax = x;\n  } // |x| < 0.84375\n\n\n  if (ax < 0.84375) {\n    if (ax < SMALL) {\n      return 1.0 - x; // raise inexact\n    }\n\n    z = x * x;\n    r = PPC + z * polyvalPP(z);\n    s = QQC + z * polyvalQQ(z);\n    y = r / s; // x < 1/4\n\n    if (x < 0.25) {\n      return 1.0 - (x + x * y);\n    }\n\n    r = x * y;\n    r += x - 0.5;\n    return 0.5 - r;\n  } // 0.84375 <= |x| < 1.25\n\n\n  if (ax < 1.25) {\n    s = ax - 1.0;\n    p = PAC + s * polyvalPA(s);\n    q = QAC + s * polyvalQA(s);\n\n    if (sign) {\n      return 1.0 + ERX + p / q;\n    }\n\n    return 1.0 - ERX - p / q;\n  } // |x| < 28\n\n\n  if (ax < 28) {\n    s = 1.0 / (ax * ax); // |x| < 1/0.35 ~ 2.857143\n\n    if (ax < 2.857142857142857) {\n      r = RAC + s * polyvalRA(s);\n      s = SAC + s * polyvalSA(s);\n    } // |x| >= 1/0.35 ~ 2.857143\n    else {\n        // x < -6\n        if (x < -6) {\n          return 2.0 - TINY; // raise inexact\n        }\n\n        r = RBC + s * polyvalRB(s);\n        s = SBC + s * polyvalSB(s);\n      }\n\n    z = setLowWord(ax, 0); // pseudo-single (20-bit) precision x\n\n    r = exp(-z * z - 0.5625) * exp((z - ax) * (z + ax) + r / s);\n\n    if (sign) {\n      return 2.0 - r / ax;\n    }\n\n    return r / ax;\n  }\n\n  if (sign) {\n    return 2.0 - TINY; // raise inexact; ~2\n  }\n\n  return TINY * TINY; // raise inexact; ~0\n} // end FUNCTION erfc()\n// EXPORTS //\n\n\nmodule.exports = erfc;","map":{"version":3,"sources":["C:/Users/Toma/Desktop/2курс/Теорія ймовірностей/erfc/node_modules/math-erfc/lib/index.js"],"names":["evalpoly","require","factory","exp","setLowWord","PINF","NINF","TINY","SMALL","ERX","PPC","PP","QQC","QQ","PAC","PA","QAC","QA","RAC","RA","SAC","SA","RBC","RB","SBC","SB","polyvalPP","polyvalQQ","polyvalPA","polyvalQA","polyvalRA","polyvalSA","polyvalRB","polyvalSB","erfc","x","sign","ax","z","r","s","y","p","q","NaN","module","exports"],"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","sourcesContent":["'use strict';\n\n/**\n* NOTE: the following copyright and license, as well as the long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_erf.c?revision=268523&view=co}.\n*\n* The implementation follows the original, but has been modified for JavaScript.\n*/\n\n/**\n* ====================================================\n* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.\n*\n* Developed at SunPro, a Sun Microsystems, Inc. business.\n* Permission to use, copy, modify, and distribute this\n* software is freely granted, provided that this notice\n* is preserved.\n* ====================================================\n*/\n\n/**\n* double erfc(double x)\n*                                 x\n*                        2       |\\\n*        erf(x)  = -----------   | exp(-t*t)dt\n*                     sqrt(pi)  \\|\n*                                0\n*\n*        erfc(x) = 1-erf(x)\n*\n*   Note that\n*\n*        erf(-x)  = -erf(x)\n*        erfc(-x) = 2 - erfc(x)\n*\n* Method:\n*   1. For |x| in [0, 0.84375),\n*\n*        erf(x)  = x + x*R(x^2)\n*        erfc(x) = 1 - erf(x)           if x in [-.84375,0.25]\n*                = 0.5 + ((0.5-x)-x*R)  if x in [0.25,0.84375]\n*\n*      where R = P/Q where P is an odd polynomial of degree 8 and Q is an odd polynomial of degree 10.\n*\n*        | R - (erf(x)-x)/x | <= 2**-57.90\n*\n*      Remark: the formula is derived by noting\n*\n*        erf(x) = (2/sqrt(pi))*(x - x^3/3 + x^5/10 - x^7/42 + ....)\n*\n*      and that\n*\n*        2/sqrt(pi) = 1.128379167095512573896158903121545171688\n*\n*      is close to one. The interval is chosen because the fix point of erf(x) is near 0.6174 (i.e., erf(x)=x when x is near 0.6174), and, by some experiment, 0.84375 is chosen to guarantee the error is less than one ulp for erf.\n*\n*   2. For |x| in [0.84375,1.25), let s = |x| - 1, and c = 0.84506291151 rounded to single (24 bits)\n*\n*        erf(x)  = sign(x) * (c + P1(s)/Q1(s))\n*        erfc(x) = (1-c) - P1(s)/Q1(s) if x > 0\n*                  1+(c+P1(s)/Q1(s))   if x < 0\n*        |P1/Q1 - (erf(|x|)-c)| <= 2**-59.06\n*\n*      Remark: here we use the Taylor series expansion at x=1.\n*\n*        erf(1+s) = erf(1) + s*Poly(s)\n*                 = 0.845.. + P1(s)/Q1(s)\n*\n*      That is, we use a rational approximation to approximate\n*\n*        erf(1+s) - (c = (single)0.84506291151)\n*\n*      Note that |P1/Q1|< 0.078 for x in [0.84375,1.25] where\n*\n*        P1(s) = degree 6 poly in s\n*        Q1(s) = degree 6 poly in s\n*\n*   3. For x in [1.25,1/0.35(~2.857143)),\n*\n*        erfc(x) = (1/x)*exp(-x*x-0.5625+R1/S1)\n*        erf(x)  = 1 - erfc(x)\n*\n*      where\n*\n*        R1(z) = degree 7 poly in z, (z=1/x^2)\n*        S1(z) = degree 8 poly in z\n*\n*   4. For x in [1/0.35,28],\n*\n*        erfc(x) = (1/x)*exp(-x*x-0.5625+R2/S2)       if x > 0\n*                = 2.0 - (1/x)*exp(-x*x-0.5625+R2/S2) if -6 < x < 0\n*                = 2.0 - tiny                         if x <= -6\n*        erf(x)  = sign(x)*(1.0 - erfc(x))            if x < 6, else\n*        erf(x)  = sign(x)*(1.0 - tiny)\n*\n*      where\n*\n*        R2(z) = degree 6 poly in z, (z=1/x^2)\n*        S2(z) = degree 7 poly in z\n*\n*   Note1:\n*       To compute exp(-x*x-0.5625+R/S), let s be a single precision number and s := x; then\n*\n*        -x*x = -s*s + (s-x)*(s+x)\n*        exp(-x*x-0.5626+R/S) = exp(-s*s-0.5625)*exp((s-x)*(s+x)+R/S);\n*\n*   Note2:\n*       Here 4 and 5 make use of the asymptotic series\n*\n*                     exp(-x*x)\n*         erfc(x) ~  ----------- * ( 1 + Poly(1/x^2) )\n*                     x*sqrt(pi)\n*\n*       We use a rational approximation to approximate\n*\n*           g(s) = f(1/x^2) = log(erfc(x)*x) - x*x + 0.5625\n*\n*       Here is the error bound for R1/S1 and R2/S2\n*\n*           |R1/S1 - f(x)| < 2**(-62.57)\n*           |R2/S2 - f(x)| < 2**(-61.52)\n*\n*   5. For inf > x >= 28,\n*\n*        erf(x)  = sign(x) * (1 - tiny)   (raise inexact)\n*        erfc(x) = tiny*tiny              (raise underflow) if x > 0\n*                = 2 - tiny               if x<0\n*\n*   6. Special cases:\n*\n*        erf(0) = 0\n*        erf(inf) = 1\n*        erf(-inf) = -1\n*        erfc(0) = 1\n*        erfc(inf) = 0\n*        erfc(-inf) = 2,\n*        erf(NaN) is NaN\n*        erfc(NaN) is NaN\n*/\n\n// MODULES //\n\nvar evalpoly = require( 'math-evalpoly' ).factory;\nvar exp = require( 'math-exp' );\nvar setLowWord = require( 'math-float64-set-low-word' );\n\n\n// CONSTANTS //\n\nvar PINF = require( 'const-pinf-float64' );\nvar NINF = require( 'const-ninf-float64' );\n\nvar TINY = 1e-300;\n\n// 2**-56 = 1/(2**56) = 1/72057594037927940\nvar SMALL = 1.3877787807814457e-17;\n\nvar ERX = 8.45062911510467529297e-1; // 0x3FEB0AC1, 0x60000000\n\n// Coefficients for approximation to erf on [0, 0.84375)\nvar PPC = 1.28379167095512558561e-1;  // 0x3FC06EBA, 0x8214DB68\nvar PP = [\n\t-3.25042107247001499370e-1, // 0xBFD4CD7D, 0x691CB913\n\t-2.84817495755985104766e-2, // 0xBF9D2A51, 0xDBD7194F\n\t-5.77027029648944159157e-3, // 0xBF77A291, 0x236668E4\n\t-2.37630166566501626084e-5  // 0xBEF8EAD6, 0x120016AC\n];\nvar QQC = 1.0;\nvar QQ = [\n\t3.97917223959155352819e-1, // 0x3FD97779, 0xCDDADC09\n\t6.50222499887672944485e-2, // 0x3FB0A54C, 0x5536CEBA\n\t5.08130628187576562776e-3, // 0x3F74D022, 0xC4D36B0F\n\t1.32494738004321644526e-4, // 0x3F215DC9, 0x221C1A10\n\t-3.96022827877536812320e-6 // 0xBED09C43, 0x42A26120\n];\n\n// Coefficients for approximation to erf on [0.84375, 1.25)\nvar PAC = -2.36211856075265944077e-3; // 0xBF6359B8, 0xBEF77538\nvar PA = [\n\t4.14856118683748331666e-1,  // 0x3FDA8D00, 0xAD92B34D\n\t-3.72207876035701323847e-1, // 0xBFD7D240, 0xFBB8C3F1\n\t3.18346619901161753674e-1,  // 0x3FD45FCA, 0x805120E4\n\t-1.10894694282396677476e-1, // 0xBFBC6398, 0x3D3E28EC\n\t3.54783043256182359371e-2,  // 0x3FA22A36, 0x599795EB\n\t-2.16637559486879084300e-3  // 0xBF61BF38, 0x0A96073F\n];\nvar QAC = 1.0;\nvar QA = [\n\t1.06420880400844228286e-1, // 0x3FBB3E66, 0x18EEE323\n\t5.40397917702171048937e-1, // 0x3FE14AF0, 0x92EB6F33\n\t7.18286544141962662868e-2, // 0x3FB2635C, 0xD99FE9A7\n\t1.26171219808761642112e-1, // 0x3FC02660, 0xE763351F\n\t1.36370839120290507362e-2, // 0x3F8BEDC2, 0x6B51DD1C\n\t1.19844998467991074170e-2  // 0x3F888B54, 0x5735151D\n];\n\n// Coefficients for approximation to erfc on [1.25, 1/0.35)\nvar RAC = -9.86494403484714822705e-3; // 0xBF843412, 0x600D6435\nvar RA = [\n\t-6.93858572707181764372e-1, // 0xBFE63416, 0xE4BA7360\n\t-1.05586262253232909814e1,  // 0xC0251E04, 0x41B0E726 \n\t-6.23753324503260060396e1,  // 0xC04F300A, 0xE4CBA38D\n\t-1.62396669462573470355e2,  // 0xC0644CB1, 0x84282266\n\t-1.84605092906711035994e2,  // 0xC067135C, 0xEBCCABB2\n\t-8.12874355063065934246e1,  // 0xC0545265, 0x57E4D2F2\n\t-9.81432934416914548592     // 0xC023A0EF, 0xC69AC25C\n];\nvar SAC = 1.0;\nvar SA = [\n\t1.96512716674392571292e1,  // 0x4033A6B9, 0xBD707687\n\t1.37657754143519042600e2,  // 0x4061350C, 0x526AE721\n\t4.34565877475229228821e2,  // 0x407B290D, 0xD58A1A71\n\t6.45387271733267880336e2,  // 0x40842B19, 0x21EC2868\n\t4.29008140027567833386e2,  // 0x407AD021, 0x57700314\n\t1.08635005541779435134e2,  // 0x405B28A3, 0xEE48AE2C\n\t6.57024977031928170135,    // 0x401A47EF, 0x8E484A93\n\t-6.04244152148580987438e-2 // 0xBFAEEFF2, 0xEE749A62\n];\n\n// Coefficients for approximation to erfc on [1/0.35, 28]\nvar RBC = -9.86494292470009928597e-3; // 0xBF843412, 0x39E86F4A\nvar RB = [\n\t-7.99283237680523006574e-1, // 0xBFE993BA, 0x70C285DE\n\t-1.77579549177547519889e1,  // 0xC031C209, 0x555F995A\n\t-1.60636384855821916062e2,  // 0xC064145D, 0x43C5ED98\n\t-6.37566443368389627722e2,  // 0xC083EC88, 0x1375F228\n\t-1.02509513161107724954e3,  // 0xC0900461, 0x6A2E5992\n\t-4.83519191608651397019e2,  // 0xC07E384E, 0x9BDC383F\n];\nvar SBC = 1.0;\nvar SB = [\n\t3.03380607434824582924e1, // 0x403E568B, 0x261D5190\n\t3.25792512996573918826e2, // 0x40745CAE, 0x221B9F0A\n\t1.53672958608443695994e3, // 0x409802EB, 0x189D5118\n\t3.19985821950859553908e3, // 0x40A8FFB7, 0x688C246A\n\t2.55305040643316442583e3, // 0x40A3F219, 0xCEDF3BE6\n\t4.74528541206955367215e2, // 0x407DA874, 0xE79FE763\n\t-2.24409524465858183362e1 // 0xC03670E2, 0x42712D62\n];\n\n\n// FUNCTIONS //\n\n// Compile functions to evaluate polynomials based on the above coefficients...\nvar polyvalPP = evalpoly( PP );\nvar polyvalQQ = evalpoly( QQ );\nvar polyvalPA = evalpoly( PA );\nvar polyvalQA = evalpoly( QA );\nvar polyvalRA = evalpoly( RA );\nvar polyvalSA = evalpoly( SA );\nvar polyvalRB = evalpoly( RB );\nvar polyvalSB = evalpoly( SB );\n\n\n// ERFC //\n\n/**\n* FUNCTION: erfc( x )\n*\tEvaluates the complementary error function.\n*\n* @param {Number} x - input value\n* @returns {Number} evaluated complementary error function\n*/\nfunction erfc( x ) {\n\tvar sign;\n\tvar ax;\n\tvar z;\n\tvar r;\n\tvar s;\n\tvar y;\n\tvar p;\n\tvar q;\n\n\t// Special case: NaN\n\tif ( x !== x ) {\n\t\treturn NaN;\n\t}\n\t// Special case: +infinity\n\tif ( x === PINF ) {\n\t\treturn 0.0;\n\t}\n\t// Special case: -infinity\n\tif ( x === NINF ) {\n\t\treturn 2.0;\n\t}\n\t// Special case: +-0\n\tif ( x === 0 ) {\n\t\treturn 1.0;\n\t}\n\tif ( x < 0 ) {\n\t\tsign = true;\n\t\tax = -x;\n\t} else {\n\t\tsign = false;\n\t\tax = x;\n\t}\n\t// |x| < 0.84375\n\tif ( ax < 0.84375 ) {\n\t\tif ( ax < SMALL ) {\n\t\t\treturn 1.0 - x; // raise inexact\n\t\t}\n\t\tz = x * x;\n\t\tr = PPC + z*polyvalPP( z );\n\t\ts = QQC + z*polyvalQQ( z );\n\t\ty = r / s;\n\n\t\t// x < 1/4\n\t\tif ( x < 0.25 ) {\n\t\t\treturn 1.0 - (x + x*y);\n\t\t}\n\t\tr = x * y;\n\t\tr += x - 0.5;\n\t\treturn 0.5 - r;\n\t}\n\t// 0.84375 <= |x| < 1.25\n\tif ( ax < 1.25 ) {\n\t\ts = ax - 1.0;\n\t\tp = PAC + s*polyvalPA( s );\n\t\tq = QAC + s*polyvalQA( s );\n\t\tif ( sign ) {\n\t\t\treturn 1.0 + ERX + p/q;\n\t\t}\n\t\treturn 1.0 - ERX - p/q;\n\t}\n\t// |x| < 28\n\tif ( ax < 28 ) {\n\t\ts = 1.0 / (ax*ax);\n\n\t\t// |x| < 1/0.35 ~ 2.857143\n\t\tif ( ax < 2.857142857142857 ) {\n\t\t\tr = RAC + s*polyvalRA( s );\n\t\t\ts = SAC + s*polyvalSA( s );\n\t\t}\n\t\t// |x| >= 1/0.35 ~ 2.857143\n\t\telse {\n\t\t\t// x < -6\n\t\t\tif ( x < -6 ) {\n\t\t\t\treturn 2.0 - TINY; // raise inexact\n\t\t\t}\n\t\t\tr = RBC + s*polyvalRB( s );\n\t\t\ts = SBC + s*polyvalSB( s );\n\t\t}\n\t\tz = setLowWord( ax, 0 ); // pseudo-single (20-bit) precision x\n\t\tr = exp( -z*z - 0.5625 ) * exp( (z-ax)*(z+ax) + r/s );\n\t\tif ( sign ) {\n\t\t\treturn 2.0 - r/ax;\n\t\t}\n\t\treturn r/ax;\n\t}\n\tif ( sign ) {\n\t\treturn 2.0 - TINY; // raise inexact; ~2\n\t}\n\treturn TINY * TINY; // raise inexact; ~0\n} // end FUNCTION erfc()\n\n\n// EXPORTS //\n\nmodule.exports = erfc;"]},"metadata":{},"sourceType":"script"}