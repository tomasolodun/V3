{"ast":null,"code":"'use strict'; // EVALPOLY //\n\n/**\n* FUNCTION: evalpoly( c, x )\n*\tEvaluates a polynomial.\n*\n* @param {Number[]|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} c - polynomial coefficients sorted in ascending degree\n* @param {Number} x - value at which to evaluate the polynomial\n* @returns {Number} evaluated polynomial\n*/\n\nfunction evalpoly(c, x) {\n  var p;\n  var i;\n  i = c.length;\n\n  if (i < 2 || x === 0) {\n    if (i === 0) {\n      return 0;\n    }\n\n    return c[0];\n  }\n\n  i -= 1; // Use Horner's rule (http://en.wikipedia.org/wiki/Horner's_method) to achieve efficient computation...\n\n  p = c[i] * x + c[i - 1];\n  i -= 2;\n\n  while (i >= 0) {\n    p = p * x + c[i];\n    i -= 1;\n  }\n\n  return p;\n} // end FUNCTION evalpoly()\n// EXPORTS //\n\n\nmodule.exports = evalpoly;","map":{"version":3,"sources":["C:/Users/Toma/Desktop/2курс/Теорія ймовірностей/erfc/node_modules/math-evalpoly/lib/evalpoly.js"],"names":["evalpoly","c","x","p","i","length","module","exports"],"mappings":"AAAA,a,CAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAA0B;AACzB,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AAEAA,EAAAA,CAAC,GAAGH,CAAC,CAACI,MAAN;;AACA,MAAKD,CAAC,GAAG,CAAJ,IAASF,CAAC,KAAK,CAApB,EAAwB;AACvB,QAAKE,CAAC,KAAK,CAAX,EAAe;AACd,aAAO,CAAP;AACA;;AACD,WAAOH,CAAC,CAAE,CAAF,CAAR;AACA;;AACDG,EAAAA,CAAC,IAAI,CAAL,CAXyB,CAazB;;AACAD,EAAAA,CAAC,GAAGF,CAAC,CAAEG,CAAF,CAAD,GAAOF,CAAP,GAAWD,CAAC,CAAEG,CAAC,GAAC,CAAJ,CAAhB;AACAA,EAAAA,CAAC,IAAI,CAAL;;AACA,SAAQA,CAAC,IAAI,CAAb,EAAiB;AAChBD,IAAAA,CAAC,GAAGA,CAAC,GAACD,CAAF,GAAMD,CAAC,CAAEG,CAAF,CAAX;AACAA,IAAAA,CAAC,IAAI,CAAL;AACA;;AACD,SAAOD,CAAP;AACA,C,CAAC;AAGF;;;AAEAG,MAAM,CAACC,OAAP,GAAiBP,QAAjB","sourcesContent":["'use strict';\n\n// EVALPOLY //\n\n/**\n* FUNCTION: evalpoly( c, x )\n*\tEvaluates a polynomial.\n*\n* @param {Number[]|Int8Array|Uint8Array|Uint8ClampedArray|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array|Float64Array} c - polynomial coefficients sorted in ascending degree\n* @param {Number} x - value at which to evaluate the polynomial\n* @returns {Number} evaluated polynomial\n*/\nfunction evalpoly( c, x ) {\n\tvar p;\n\tvar i;\n\t\n\ti = c.length;\n\tif ( i < 2 || x === 0 ) {\n\t\tif ( i === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn c[ 0 ];\n\t}\n\ti -= 1;\n\n\t// Use Horner's rule (http://en.wikipedia.org/wiki/Horner's_method) to achieve efficient computation...\n\tp = c[ i ]*x + c[ i-1 ];\n\ti -= 2;\n\twhile ( i >= 0 ) {\n\t\tp = p*x + c[ i ];\n\t\ti -= 1;\n\t}\n\treturn p;\n} // end FUNCTION evalpoly()\n\n\n// EXPORTS //\n\nmodule.exports = evalpoly;\n"]},"metadata":{},"sourceType":"script"}