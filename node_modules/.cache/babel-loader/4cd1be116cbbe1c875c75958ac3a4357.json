{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toma\\\\Desktop\\\\2\\u043A\\u0443\\u0440\\u0441\\\\\\u0422\\u0435\\u043E\\u0440\\u0456\\u044F \\u0439\\u043C\\u043E\\u0432\\u0456\\u0440\\u043D\\u043E\\u0441\\u0442\\u0435\\u0439\\\\erfc\\\\src\\\\App.js\";\nimport erfc from \"math-erfc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction showFile(input) {\n  //функція, що відповідає за завантаження файлу, зчитування та внесення його в масив\n  let file = input.target.files[0];\n  let reader = new FileReader();\n  reader.readAsText(file);\n\n  reader.onload = function () {\n    calculateResult(reader.result.split(\"\\n\").filter(i => i.length !== 0)); // розділення пострічково та перевірка на пустоту\n  };\n}\n\nfunction calculateResult(arrayOfRows) {\n  var result = \"\";\n  arrayOfRows.forEach(row => {\n    //eslint-disable-next-line eqeqeq\n    let rowFinal = row.split(\"\").filter(i => i != \"\\r\"); // розділяємо поелементно\n\n    let sqrtOfN = Math.sqrt(rowFinal.length); //знаходимо корінь  кількості елементів рядка\n\n    let rowCalculationResult = 0; //створюємо змінну для наступної дії\n    //eslint-disable-next-line eqeqeq\n\n    rowFinal.map(i => rowCalculationResult += i == \"1\" ? 1 : -1); //перевіряємо масив та заміняємо 0 на -1\n\n    let stats = Math.abs(rowCalculationResult) / sqrtOfN; //за формулою знаходимо статистику\n\n    let res = erfc(stats / Math.sqrt(2)); //знаходимо P-значення\n\n    result += `Row: ${row}\\n \nrow length: ${rowFinal.length}\\n\nrowCalculationResult: ${rowCalculationResult}\\n\nsqrtOfN: ${sqrtOfN}\\n\nstats: ${stats}\\n\nerfc result: ${res}\\n\nisTestPassed: ${res > 0.01 ? true : false}\\n\\n\\n`; //виводимо результат\n  });\n  console.log(result);\n}\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: i => showFile(i)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Toma/Desktop/2курс/Теорія ймовірностей/erfc/src/App.js"],"names":["erfc","showFile","input","file","target","files","reader","FileReader","readAsText","onload","calculateResult","result","split","filter","i","length","arrayOfRows","forEach","row","rowFinal","sqrtOfN","Math","sqrt","rowCalculationResult","map","stats","abs","res","console","log","App"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,WAAjB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAE;AACzB,MAAIC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAX;AACA,MAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACAD,EAAAA,MAAM,CAACE,UAAP,CAAkBL,IAAlB;;AACAG,EAAAA,MAAM,CAACG,MAAP,GAAgB,YAAY;AAC1BC,IAAAA,eAAe,CAACJ,MAAM,CAACK,MAAP,CAAcC,KAAd,CAAoB,IAApB,EAA0BC,MAA1B,CAAkCC,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAa,CAArD,CAAD,CAAf,CAD0B,CAC+C;AAC1E,GAFD;AAGD;;AAGD,SAASL,eAAT,CAAyBM,WAAzB,EAAsC;AACpC,MAAIL,MAAM,GAAG,EAAb;AACAK,EAAAA,WAAW,CAACC,OAAZ,CAAqBC,GAAD,IAAS;AAC3B;AACA,QAAIC,QAAQ,GAAGD,GAAG,CAACN,KAAJ,CAAU,EAAV,EAAcC,MAAd,CAAqBC,CAAC,IAAIA,CAAC,IAAI,IAA/B,CAAf,CAF2B,CAE0B;;AACrD,QAAIM,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUH,QAAQ,CAACJ,MAAnB,CAAd,CAH2B,CAGe;;AAC1C,QAAIQ,oBAAoB,GAAG,CAA3B,CAJ2B,CAIG;AAC9B;;AACAJ,IAAAA,QAAQ,CAACK,GAAT,CAAaV,CAAC,IAAIS,oBAAoB,IAAIT,CAAC,IAAI,GAAL,GAAW,CAAX,GAAe,CAAC,CAA1D,EAN2B,CAMmC;;AAC9D,QAAIW,KAAK,GAAGJ,IAAI,CAACK,GAAL,CAASH,oBAAT,IAAiCH,OAA7C,CAP2B,CAO2B;;AACtD,QAAIO,GAAG,GAAG3B,IAAI,CAACyB,KAAK,GAAGJ,IAAI,CAACC,IAAL,CAAU,CAAV,CAAT,CAAd,CAR2B,CAQW;;AACtCX,IAAAA,MAAM,IAAK,QAAOO,GAAI;AAC1B,cAAcC,QAAQ,CAACJ,MAAO;AAC9B,wBAAwBQ,oBAAqB;AAC7C,WAAWH,OAAQ;AACnB,SAASK,KAAM;AACf,eAAeE,GAAI;AACnB,gBAAgBA,GAAG,GAAG,IAAN,GAAa,IAAb,GAAoB,KAAM,QANtC,CAT2B,CAeoB;AAChD,GAhBD;AAiBAC,EAAAA,OAAO,CAACC,GAAR,CAAYlB,MAAZ;AACD;;AAED,SAASmB,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAGhB,CAAD,IAAOb,QAAQ,CAACa,CAAD;AAA5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANQgB,G;AAQT,eAAeA,GAAf","sourcesContent":["import erfc from \"math-erfc\";\n\nfunction showFile(input) { //функція, що відповідає за завантаження файлу, зчитування та внесення його в масив\n  let file = input.target.files[0];\n  let reader = new FileReader();\n  reader.readAsText(file);\n  reader.onload = function () {\n    calculateResult(reader.result.split(\"\\n\").filter((i) => i.length !== 0));// розділення пострічково та перевірка на пустоту\n  };\n}\n\n\nfunction calculateResult(arrayOfRows) {\n  var result = \"\";\n  arrayOfRows.forEach((row) => {\n    //eslint-disable-next-line eqeqeq\n    let rowFinal = row.split(\"\").filter(i => i != \"\\r\"); // розділяємо поелементно\n    let sqrtOfN = Math.sqrt(rowFinal.length); //знаходимо корінь  кількості елементів рядка\n    let rowCalculationResult = 0; //створюємо змінну для наступної дії\n    //eslint-disable-next-line eqeqeq\n    rowFinal.map(i => rowCalculationResult += i == \"1\" ? 1 : -1); //перевіряємо масив та заміняємо 0 на -1\n    let stats = Math.abs(rowCalculationResult) / sqrtOfN; //за формулою знаходимо статистику\n    let res = erfc(stats / Math.sqrt(2)); //знаходимо P-значення\n    result += `Row: ${row}\\n \nrow length: ${rowFinal.length}\\n\nrowCalculationResult: ${rowCalculationResult}\\n\nsqrtOfN: ${sqrtOfN}\\n\nstats: ${stats}\\n\nerfc result: ${res}\\n\nisTestPassed: ${res > 0.01 ? true : false}\\n\\n\\n`; //виводимо результат\n  });\n  console.log(result);\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <input type=\"file\" onChange={(i) => showFile(i)}></input>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}